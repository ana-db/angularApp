UF1643 - Gestión y control de los Sistemas de información


17/01/2020

Si no tenemos instalado node, hay que descargarlo:
https://nodejs.org/en/download/ ? descargar el LTS
https://angular.io/ --> https://angular.io/start


Vamos instalando los pre-requisitos siguiendo https://angular.io/guide/setup-local (consola visual studio):
	1) instalamos: npm install -g @angular/cli
	2) creamos app en angular: ng new my-app
	3) nos situamos en el directorio: cd my-app
	4) abrimos el servidor de la aplicación: ng serve --open



Estructura de la aplicación:
- package.jon es el equivalente al pom
- .gitingnore
- angular.json: fichero config
- browserlist: para decir en qué navegdores se va a ejecutar
- tsconfig: config para typescript

npm i (o npm install): para instalar todas las dependencias de 1 proyecto

- src:
	- app: aplicación
	- assets: imágenes y cosas estáticas
- enironments:
- favicon
- index



- instalamos bootstrap en angular (con la consola):
	https://loiane.com/2017/08/how-to-add-bootstrap-to-an-angular-cli-project/
	1- npm install bootstrap
	2- npm i --save-dev bootstrap , mejor npm i --save bootstrap --> para meterlo como dependencia en package.json
	3- Importing the CSS
		Configure angular.json:
	
		"styles": [
  		"node_modules/bootstrap/dist/css/bootstrap.min.css",
  		"styles.scss"
		]
		
		(en test y build)


- json: 
	- def array de 3 productos:
	[{},
	{},
	{}
]

	- https://jsonlint.com/ --> es el validador de json para ir probando el código que vamos creando, al validarlo nos va sacando los errores de sintaxis que tenemos


------------------------------------------


20/01/2020

Servicios Web: 

- Primer Servicio Web con SOAP ( xml )
	- Los WebServices son programas que permiten el intercambio de datos entre otros programas que pueden estar escritos en cualquier lenguaje y montados en cualquier entorno.
	- protocolo de comunicaciones (el SOAP) entre distintas aplicaciones
	- WSDL (Lenguaje de Descripción de Servicios Web): representa una especie de contrato entre el proveedor y el que solicita. es el que dice cómo funciona el servicio
	- SOAP (Simple Object Access Protocol) --> https://es.wikipedia.org/wiki/Simple_Object_Access_Protocol
		- W3C (World Wide Web Consortium)
		- son objetos simples basados en xml
		- estructura de intercambio de mensajes (foto drcha): envelope, header y body
		- Características
			- SOAP es un paradigma de mensajería de una dirección sin estado
			- Este protocolo está basado en XML y se conforma de tres partes:
				- Sobre (envelope): define qué hay en el mensaje y cómo procesarlo.
				- Conjunto de reglas de codificación para expresar instancias de tipos de datos.
				- La Convención para representar llamadas a procedimientos y respuestas.
			- El protocolo SOAP tiene 3 características principales:
				- Extensibilidad (seguridad y WS-routing son extensiones aplicadas en el desarrollo).
				- Neutralidad (bajo protocolo de transporte TCP puede ser utilizado sobre cualquier protocolo de aplicación como HTTP, SMTP o JMS).
				- Independencia (permite cualquier modelo de programación).
			- Estructura del mensaje
				Un mensaje SOAP es un documento XML ordinario con la siguiente estructura:
				- Envelope (obligatoria): raíz que de la estructura, es la parte que identifica al mensaje SOAP como tal.
				- Header: esta parte es un mecanismo de extensión ya que permite enviar información relativa a cómo debe ser procesado el mensaje. 
					Es una herramienta para que los mensajes puedan ser enviados de la forma más conveniente para las aplicaciones. 
					Está compuesto por "Header Blocks" que delimitan las unidades de información necesarias para el header.
				- Body (obligatoria): contiene la información relativa a la llamada y la respuesta.
				- Fault: bloque que contiene información relativa a errores que se hayan producido durante el procesado del mensaje y el envío desde el "SOAP Sender" hasta el "Ultimate SOAP Receiver". 
			
			- Ejemplos de mensajes SOAP:

1) llamada/petición (el cliente solicita info sobre un producto a un proveedor): 
<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
   <soap:Body>
     <getProductDetails xmlns="http://warehouse.example.com/ws">
       <productId>827635</productId>
     </getProductDetails>
   </soap:Body>
</soap:Envelope>

la cabecera no es obigatoria

2) respuesta del proveedor:
<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
   <soap:Body>
     <getProductDetailsResponse xmlns="http://warehouse.example.com/ws">
       <getProductDetailsResult>
         <productName>Toptimate 3-Piece Set</productName>
         <productId>827635</productId>
         <description>3-Piece luggage set.  Black Polyester.</description>
         <price>96.50</price>
         <inStock>true</inStock>
       </getProductDetailsResult>
     </getProductDetailsResponse>
   </soap:Body>
 </soap:Envelope>

		- Cómo funciona (gráfico cómo interactúa un conjunto de Servicios Web)
			- el usuario se conecta al descriptor (wsdl) en lugar de conectarse directamente a la base de datos
	
	- ej. web service https://si.ua.es/es/servicios-web/serviciosweb/publicos/publicos.html
		descriptor --> https://cvnet.cpd.ua.es/servicioweb/publicos/pub_gral.asmx?WSDL

el siguiente objeto es de tipo completo y está formado por datos de tipo string
<s:complexType name="ClaseAlojamiento">
<s:sequence>
<s:element minOccurs="0" maxOccurs="1" name="idalojamiento" type="s:string"/>
<s:element minOccurs="0" maxOccurs="1" name="direccion" type="s:string"/>
<s:element minOccurs="0" maxOccurs="1" name="contacto" type="s:string"/>
<s:element minOccurs="0" maxOccurs="1" name="precio" type="s:string"/>
<s:element minOccurs="0" maxOccurs="1" name="fecha" type="s:string"/>
<s:element minOccurs="0" maxOccurs="1" name="observaciones" type="s:string"/>
<s:element minOccurs="0" maxOccurs="1" name="idtipo" type="s:string"/>
<s:element minOccurs="0" maxOccurs="1" name="descripciontipo" type="s:string"/>
<s:element minOccurs="0" maxOccurs="1" name="codigotipo" type="s:string"/>
<s:element minOccurs="0" maxOccurs="1" name="idregimen" type="s:string"/>
<s:element minOccurs="0" maxOccurs="1" name="descripcionregimen" type="s:string"/>
<s:element minOccurs="0" maxOccurs="1" name="codigoregimen" type="s:string"/>
<s:element minOccurs="0" maxOccurs="1" name="idzona" type="s:string"/>
<s:element minOccurs="0" maxOccurs="1" name="descripcionzona" type="s:string"/>
<s:element minOccurs="0" maxOccurs="1" name="fechaalta" type="s:string"/>
<s:element minOccurs="0" maxOccurs="1" name="latitud" type="s:string"/>
<s:element minOccurs="0" maxOccurs="1" name="longitud" type="s:string"/>
<s:element minOccurs="0" maxOccurs="1" name="telefono" type="s:string"/>
<s:element minOccurs="0" maxOccurs="1" name="habitaciones" type="s:string"/>
<s:element minOccurs="0" maxOccurs="1" name="plazas" type="s:string"/>
<s:element minOccurs="0" maxOccurs="1" name="urlinfo" type="s:string"/>
<s:element minOccurs="0" maxOccurs="1" name="urladicional" type="s:string"/>
<s:element minOccurs="0" maxOccurs="1" name="emailcontacto" type="s:string"/>
</s:sequence>
</s:complexType>


para descargar SOAP UI: 
https://www.soapui.org/downloads/soapui.html --> SoapUI Open Source --> download

	en eclipse creamos proyectos: ClienteSOAP_UA (ej de web service client), WSFrases (ej de web service)

	- Crear un servicio (WSFrases)
	- Servicio Web Rest ( Json ) - vídeo teórico
		- SW para desacoplar el cliente del backend
		- api rest buena características
		- modelos rest
		- uri
		- http como framework
			- códigos de estado http: https://es.wikipedia.org/wiki/Anexo:C%C3%B3digos_de_estado_HTTP


https://github.com/typicode/json-server --> con teoría 


https://www.getpostman.com/downloads/


https://angular.io/guide/http


-------------------------------------------------------------


27/01/2020

- JavaScript - AJAX Asynchronous JavaScript And XMLPágina
	- petición: acceso a los datos se realiza medianteXMLHttpRequest, objeto disponible en los navegadores actuales.
	- asíncrono: hacemos la petición y nos devuelve datos sin tener que recargar toda la página 
	(porque estas aplicaciones se ejecutan en el cliente, es decir, en el navegador de los usuarios mientras se mantiene la comunicación asíncrona con el servidor en segundo plano)
	- JavaScript es el lenguaje interpretado (scripting language) en el que normalmente se hacen las funciones de llamada de Ajax,
	 mientras que el acceso a los datos se realiza mediante XMLHttpRequest
	
	- Problemas e Inconvenientes:
		- Las páginas creadas dinámicamente mediante peticiones sucesivas AJAX, no se registran automáticamente en el historial del navegador
		- Los motores de búsqueda no analizan JavaScript. La información en la página dinámica no se almacena en los registros del buscador.
		- Hay problemas usando Ajax entre nombres de dominios, a esto se le conoce como Same Origin Policy o Política del Mismo Origen, 
		lo cual es una medida de seguridad que puede ser solucionada con Cross-Origin Resource Sharing (CORS). --> desde 1 dominio no se puede llamar a otro para cargarlo, sólo desde javascript
		Se soluciona con las 3 líneas que añadimos en el service (o filtro)
		- Dependiendo de cómo se desarrolle el sitio web, puedes mejorar o empeorar la carga en el servidor. 
		Ajax puede ayudar al servidor a evitar la fase de renderización de HTML, dejándole ese trabajo al cliente, 
		pero también puede sobrecargar al servidor si se hace varias llamadas a Ajax.
	
	- ¿Cuándo usar AJAX?
		- Reemplazar partes de la página que requieran una actualización constante o por una acción del usuario. -->
			--> actualiza sólo una parte de la página (ej para completar el buscador hecho con ajax: https://jqueryui.com/autocomplete/)
		- Enviar peticiones al servidor que no devuelvan grandes cantidades de información

- Ejercs optativos para ampliar JavaScritp (30 ejercicios vanilla javascript y FreeCodeCampURL)

- Curso JavaScript ES6 --> videos youtube ("Curso de ES6 Javascript 01 - Let vs Var" y siguientes)

- TypeScript
	- es un lenguaje de programación libre y de código abierto desarrollado y mantenido por Microsoft
	- se puede usar para desarrollar aplicaciones JavaScript que se ejecutarán en el cliente o en el servidor (Node.js), o tambien para frotend (Angular).
	- se trata de un superconjunto de Javascript, es decir, amplía Javascript con una nueva sintaxis que añade, entre otras cosas, el tipado estático opcional, genéricos, decoradores y elementos de POO como interfaces o property accessors.
	- TypeScript compila código JavaScript que se ejecuta en cualquier navegador, host, sistema operativo o motor de JavaScript que admita ECMAScript 3 (o más reciente). --> ES6 o ECMAScript2015
	- esquema círculos
	- ES5: ecma scritp, se encarga de definir cómo funciona javascript

- Single-page application --> https://es.wikipedia.org/wiki/Single-page_application

comando para crear componentes en angular desde la consola: C:\0396\angularApp\angularApp>ng g c paginas/inicio


-------------------------------------------------------------


28/01/2020

- Trabajando con Arrays (programación funcional)
	- map, filter, find y reduce --> sirven para trabajar con una colección de datos
	map: obtenemos otra colección de datos transformada a partir de la inicial. Devuelve un array de la misma long que el original pero distinto
	filter: hace un filtro de la colección de datos. Si la condición es true, devuelve el objeto completo sobre el que iteramos; si no, no devuelve nada
	reduce: devuelve un objeto a partir del array inicial, es decir, reduce los datos a uno solo
	find: busca el 1er objeto que cumple una condición

	ver imagen google: map filter find reduce

	- Reducción de Arrays
		- reduce pasa la devolución de llamada cuatro argumentos: valor actual, valor anterior, índice actual, array con el que se llama a reduce. No siempre tienen que aparecer estos 4 argumentos, el 3ero y 3l 4o son opcionales
		- reduce en la práctica


-------------------------------------------------------------


31/01/2020

- Servicios Web SOAP vs REST
	- Introducción
		- comunicar diferentes aplicaciones
		- desacoplar backend

	- Inconvenientes
		- xml más lento porque tiene una estructura y se tiene que validar. Su parte buena es que proporciona más seguridad
		- hay que habilitar post en rest

	- Razones para crear servicios Web
		- SOAP es un web service con xml 
			- llamadas a universidad alicante
			- montamos un cliente soap
		- si se quiere migrar el web service, se habilitan nuevas urls añadiendo un v2 por ej (y se sigue manteniendo v1, ej apipokemon), para evitar que los clientes conectados se caigan si cambiamos directamente la url

	- SOAP vs REST
		- SOA: estructura orientada a servir datos. Con SOA llamaríamos sólo 1 vez si tenemos que usar varios dao distintos

		- Qué es SOAP: 
			- sólo formato XML
			- trabaja con http pero también puede hacerlo con otros portocolos
		
		- Qué es REST:
			- normalmente devuelve JSON aunque también puede devolver otros tipos (csv...)
			- métodos de HTTP para comunicarse, como lo son GET, POST, PUT, DELETE, PATCH y a la vez, utiliza los códigos de respuesta nativos de HTTP (404,200,204,409)
			- Header Content-Type define el tipo de datos que enviamos, por eso REST es tan flexible que permite transmitir prácticamente cualquier tipo de datos
			- JSON (JavaScript Object Notation) es interpretado de forma natural por JavaScript
			- REST debería ser utilizado para obtener datos en aplicaciones WEB que funcionan principalmente con el Modelo MVC del lado del cliente, es decir, que todos los procesamientos se realizan desde el navegador y que solo va al backend para obtener o actualiza la base de datos
		
		- Conclusiones:
			- IoT: usa xml (soap) porque es más rápido que rest
			- Ventajas REST vs Ventajas SOAP
				- rest usa distintos tipos, principalmente json || soap sólo xml
				- rest sólo síncrono || soap puede ser Sincrono y Asincrono
			

hay servicios web públicos (noticias, alojamientos...) y privados (zona de alumnos a la que habrá que acceder registrándose)
	- https://si.ua.es/es/servicios-web/serviciosweb/publicos/publicos.html
	- descriptor --> https://cvnet.cpd.ua.es/servicioweb/publicos/pub_gral.asmx?WSDL
		- <s:schema elementFormDefault="qualified" targetNamespace="http://UASI/WS_GRAL.wsdl">
			schema: define si las etiquetas están bien puestas
		- fichero .xsd : para definir esquema
		- fichero .dtd: define cómo tienen que estar formadas las eiquetas de html


