UF1643 - Gestión y control de los Sistemas de información


-------------------------------------------------------------------

comandos:
	- crear nueva app: ng new my-app
	- abrir el servidor: ng serve --open
	- crear componentes: ng g c paginas/inicio
	- Crear directivas: ng g d directivas/subrayar
	- Crear filtros: ng g pipe pipes/animales	

	- Could not find module "@angular-devkit/build-angular" from... (angularFrutas 08/02/2020) --> npm install --save-dev @angular-devkit/build-angular	

-------------------------------------------------------------------


28/01/2020

- Trabajando con Arrays (programación funcional)
	map, filter, find y reduce --> sirven para trabajar con una colección de datos
	- map: obtenemos otra colección de datos transformada a partir de la inicial. Devuelve un array de la misma long que el original pero distinto
	- filter: hace un filtro de la colección de datos. Si la condición es true, devuelve el objeto completo sobre el que iteramos; si no, no devuelve nada
	- reduce: devuelve un objeto a partir del array inicial, es decir, reduce los datos a uno sólo
	- find: busca el 1er objeto que cumple una condición

	ver imagen google: map filter find reduce

	- Un map de lista a lista
		https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Array/map
		- map crea una nueva array mediante la transformación de cada elemento en una array, de forma individual
	- Filtrar
		https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Array/filter
		- filter crea una nueva matriz eliminando los elementos que no pertenecen
	- Reducción de Arrays
		https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Array/reduce
		- reduce toma todos los elementos en un array, y los reduce en un sólo valor
			IMPORTANTE: reduce devuelve un solo valor, no un array que contiene un único elemento
		- reduce pasa la devolución de llamada cuatro argumentos: valor actual, valor anterior, índice actual, array con el que se llama a reduce. 
			No siempre tienen que aparecer estos 4 argumentos, el 3ero y el 4o son opcionales
		- reduce en la práctica
	- Find buscando dentro de los Arrays
		https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Array/find
		- find() devuelve el valor del 1er elemento del array que cumple la función de prueba proporcionada. En cualquier otro caso devuelve undefined
		- find no transforma el array desde el cual es llamado
		

-------------------------------------------------------------


04/02/2020:


- TypeScript:

	- es un lenguaje de programación libre y de código abierto desarrollado y mantenido por Microsoft
	- tipado estático opcional: poniendo los 2 puntitos
	- genéricos: se hace una clase (IDAO) y cuando se herede, se indica su tipo: public class ReseniaDAO implements IDAO<Resenia>
	- TypeScript se compila en javascript
	- Pagina oficial: http://www.typescriptlang.org/docs/home.html
	- Repositorio en GITHUB: https://github.com/Microsoft/TypeScript

	- se puede usar para desarrollar aplicaciones JavaScript que se ejecutarán en el cliente o en el servidor (Node.js), o tambien para frotend (Angular).
	- se trata de un superconjunto de Javascript, es decir, amplía Javascript con una nueva sintaxis que añade, entre otras cosas, el tipado estático opcional, genéricos, decoradores y elementos de POO como interfaces o property accessors.
	- TypeScript compila código JavaScript que se ejecuta en cualquier navegador, host, sistema operativo o motor de JavaScript que admita ECMAScript 3 (o más reciente). --> ES6 o ECMAScript2015

	- esquema círculos
	- ES5: ecma scritp, se encarga de definir cómo funciona javascript

	- Por qué Typescript
		- diseñado para ejecutarse en un navegador y hacer cosas simples con html
		- con técnicas como el tipado estático opcional y/o la encapsulación para generar un código mucho más mantenible y escalable que con JavaScript tradicional, sin perder el carácter dinámico del mismo.

	- Watcher: escucha y cada vez que hacemos un cambio, lo coge al vuelo
		es decir, cada vez que guardemos las modificaciones el fichero se compilará automáticamente

	- Sistema de tipos:
		- principal característica de Typescript 
		- realiza una formalización de los tipos de Javascript, mediante una representación estática de su sistema de tipado dinámico
		- variables con let en lugar de var:
		
		let myName: string = "Miguel";
		let printName = (name: string) => {
    			console.log(name);
		}

		- en el fichero main.js se guardan todos los ficheros compilados

		TypeScript admite los siguientes tipos de datos:
		- String 
		- Number
		- Boolean: tipo de dato logico que representa verdadero o falso.
		- Array: tipo de dato estructurado que permite almacenar una colección de elementos.
		- Tuple: similar al array, pero con un número fijo de elementos escritos.
		- Enum: representa al tipo enumeración. Una enumeración es una forma de dar nombres descriptivos a los conjuntos de valores numéricos
			--> ejemplos: 
				- https://jarroba.com/enum-enumerados-en-java-con-ejemplos/
				- http://www.typescriptlang.org/docs/handbook/enums.html
			son siempre ctes
			ej. estaciones: primavera, verano, otoño, invierno y cada uno estaría identificado con un número de forma que sólo se pueda elegir uno de esos valores y ningún otro
		- Any: indica que la variable puede ser de cualquier tipo. Es muy útil a la hora de trabajar con librerías externas.
			se suele usar con servicios rest porque sabemos que nos devuelve un json, pero un json no es un tipo concreto (dentro puede tener datos string, number...)
		- Void: indica que una función no devolverá ningún valor.
		- Never: este tipo representa el tipo de valores que nunca se producen. Por ejemplo para indicar que una función siempre arroja una excepción o que nunca termina su ejecución.
		- ejemplos en doc oficial --> http://www.typescriptlang.org/docs/handbook/basic-types.html

		- Ejemplo:
			// 1 - declaracion del tipo
			type Ranking = [number, string, boolean];
			// 2 - definición de variables 
			let position: number;
			let playerName: string;
			let finishedGame: boolean;
			let ranking: Ranking;
			let hallOfFame: Array<Ranking> = [];	
			// 3 - crea un ranking
			position = 1;
			playerName = "Bruno Krebs";
			finishedGame = true;
			ranking = [position, playerName, finishedGame];
			hallOfFame.push(ranking);
			// 4 - crea otro ranking
			position = 2;
			playerName = "Maria Helena";
			finishedGame = true;
			ranking = [position, playerName, finishedGame];
			hallOfFame.push(ranking);
			// 5 - define una funcion que recorre todos los rankings
			function printRankings(rankings: Array<RankingTuple>): void {
			  for (let ranking of rankings) {
			    console.log(ranking);
			  }
			}
			// 6 - llama a la función
			printRankings(hallOfFame);

	- Iteraciones:
		- for … in: permite recorrer objetos iterables obteniendo sus indices
		- for … of: permite recorrer colecciones obteniendo su valor
		
		let list = [4, 5, 6];
		for (let i in list) {
   			console.log(i); // "0", "1", "2" <-- indices
		}
		for (let i of list) {
   			console.log(i); // "4", "5", "6" <-- valores
		}

	- Módulos:
		- Otra de las características de Typescript es heredada de ECMAScript 2015: la posibilidad de crear módulos
		- una forma de encapsular código en su propio ámbito. 
		- Nos permiten agrupar nuestro código en diferentes ficheros, permitiéndonos exportarlos y utilizarlos donde los necesitemos. 
		- nos facilita la tarea de crear software más ordenado y por ende más escalable y mantenible.
		- se usan las palabras reservadas export e import

		- TypeScript también soporta otra serie de funcionalidades como:
			- Clases y Objetos
			- Herencia
			- Interfaces
			- Clases Abstractas
			- Getters y Setters
			- Decoradores

	- extra: Videos Youtube: Introducción al curso de TypeScript para Angular 2 en Español --> https://www.youtube.com/watch?v=vFJT8pX0eXs&list=PLBdkl5-ytBTw28OJMumO-iUxYnShbhqwO





- SASS
	- no hay que instalar nada porque ya lo tiene el propio framework
	- https://sass-lang.com/guide
		- sass --watch input.scss output.css --> ficheros de entrada y salida
		- Variables
			$color_pink:#da9393; //Variable
			h1{
    				color: $color_pink; //usamos la variable que hemos creado
			}
		- ng build --prod --> genera una carpeta con un fichero para dejar en el servidor de producción (dist\angularApp)
			- main.js --> contiene todos los componentes del desarrollo
			- runtime --> código fuente
			- polyfills --> plugins/parches por si algo no funciona bien nativamente

C:\0396\angularApp\angularApp>ng build --prod
Generating ES5 bundles for differential loading...
ES5 bundle generation complete.

chunk {0} runtime-es2015.edb2fcf2778e7bf1d426.js (runtime) 1.45 kB [entry] [rendered]
chunk {0} runtime-es5.edb2fcf2778e7bf1d426.js (runtime) 1.45 kB [entry] [rendered]
chunk {2} polyfills-es2015.2987770fde9daa1d8a2e.js (polyfills) 36.4 kB [initial] [rendered]
chunk {3} polyfills-es5.6696c533341b95a3d617.js (polyfills-es5) 123 kB [initial] [rendered]
chunk {1} main-es2015.c98ae739d9a85f89df4a.js (main) 255 kB [initial] [rendered]
chunk {1} main-es5.c98ae739d9a85f89df4a.js (main) 310 kB [initial] [rendered]
chunk {4} styles.c028f661f79f7de98b90.css (styles) 154 kB [initial] [rendered]
Date: 2020-02-04T08:31:05.717Z - Hash: 06f190c2d3e45465a52c - Time: 55728ms

		- Nesting: en este ejemplo aplicamos estilos a las etiquetas code que estén dentro de p
			p {
    				code {
        				color: $color_green;
        				background-color: $color_black;
        				padding: 2px 3px;
    				}
			}
		- Partials: es una especie de import (y está montado), es como hacer imports de pequeños cachitos de sass. 
			Se distingue porque su nomenclatura es _partial.scss, se importa como import partial (sin _ ni extensión)
		- Modules: para importar otro fichero de estilo en el orden en el que queramos, @use 'base';
		- Mixins: define una función y se la aplica a un componente 
			//mixins o funciones para reutilizar:
			@mixin redondear( $radio, $color ) {
			    border-radius: $radio;
			    border: 1px solid $color;
			    padding: 10px;
			}
			.borde10{
			    @include redondear(10px, $color_pink); //usamos mixin
			}
			.borde50{
			    @include redondear(50%, #FF0000);
			}
		- Extend/Inheritance
			//Herencia (Extend/Inheritance):
			%boton {
    				@include redondear(45%, $color_black);
    				border: 3px solid;
    				padding: 10px;
    				color: white;
    				background-color: #2A272A;
			}
			.boton-verde {
			    @extend %boton;
			    background-color: #356840;
			    border-color: darkolivegreen;
			    &:hover { //aplicamos nesting en el pseudoselector para hacer el hover
			        background-color: rgb(73, 156, 84);
			    }
			}
	




- Angular Curso Practico Completo, Desde Cero, Para Principiantes
	https://www.youtube.com/watch?v=Sx_2dOYOtes
 
- Manual Angular Castellano (pdf)
	- componentes
	- Data Binding Flow: es el envío entre el controlador y las páginas, ej llevar un título a inicio
	- Dependency Injection: Lazy SPA --> se cargan los datos cuando se necesitan, no desde el principio, ej, lista de cursos y su detalle (el detalle tendrá más datos)
	- se trabaja con Typescript pero puede compilar a ES2015/6
	- Crear el esqueleto de una aplicación Angular 2

	- Scripts de npm

		"scripts": {
    			"ng": "ng",
		    "start": "ng serve",
 		   "build": "ng build",
 		   "test": "ng test",
 		   "lint": "ng lint",
 		   "e2e": "ng e2e"
		}

	- Archivos y carpetas con un proyecto de Angular 2.1 y Angular 4
		- index.html: pag principal y en la que metemos el componente principal <app-root></app-root>
			"app-root" es el componente raíz de la aplicación. En el desarrollo basado en componentes es un 
			patrón normal que toda la aplicación se construya en un componente principal, del que colgará todo un
			árbol de componentes especializados en hacer cada una de las cosas necesarias.
		- package.json: resume las dependencias del proyecto, las librerías sobre las que nos apoyamos, que se gestionan por medio de npm.
		- Carpeta node_modules: carpeta donde npm va colocando todas las dependencias del proyecto, es decir, el código de todas las
			librerías o componentes que estemos usando para basarnos en el desarrollo de una aplicación. Por ejemplo,
			el propio Angular es una dependencia
		- Carpeta e2e: para pruebas endo to end
	- Archivo app.module.ts
	- Alterando el código de nuestro componente
	- Piezas declarables en una vista
		- propiedad, Expresión, Binding, evento
	- Ejemplos de sintaxis utilizada en vistas de Angular 2
		- Propiedades
		- Doble binding: el valor está en los 2 sitios, modelo y vista
			¿Cómo te llamas? <input type="text" [(ngModel)]="quien"> --> ese quien 




- Angular Pagina Oficial

- Flujo de la información de la vista al modelo y modelo a vista
	- Estructura de angular MVVM: Modelo Vista - Vista Modelo --> Modelo: .ts o controlador, Vista: html
	
	
-------------------------------------------------------------------


05/02/2020

- Directivas:
	- una directiva es una propiedad de la etiqueta/atributo que lo lleva
	- *ngIf, *ngFor, *ngSwitch son ejemplos de directivas
	- 3 tipos: 
		- Components: son directivas con una plantilla de html.
		- Estructurales: cambian el DOM añdiendo o removiendo elementos, por jemplo *ngIf.
		- Attribute directive: cambian la apariencia de un elemento del DOM, por ejemplo NgStyle. --> hidden, disabled

	- ¿Cómo creo una directiva? 
		ng generate directive $nombre_de_nuestra_directiva --> ng g d directivas/hello
		- decorador @Directive con una propiedad “selector” donde pondremos el nombre de nuestra directiva. 
			El nombre que pongamos en esta propiedad será el mismo nombre que tendrá el atributo html.
		- ElementRef: es una referencia al elemento html que contiene la directiva. Sólo hay que saber cómo se accede 
			--> en nuestro ejemplo sería el "p" que contiene appHello
			 hay que inyectársela al constructor --> constructor(private element: ElementRef){}
		- @HostListener: Nos da la capacidad de escuchar eventos del elemento que contiene la directiva. 
			Nuestros ‘mouseenter’ y ‘mouseleave’ (cuando ratón entra y ratón sale). Justo debajo la función que se va a ejecutar cuando ocurra.
		- Es importantes no olvidarnos de importar HostListener y ElementRef


- Pipes o Filtros
	- nos permiten alterar la forma en la que se van a visualizar los datos --> transformar cosas
	- docu oficial --> https://angular.io/guide/pipes
	- filtros de angular --> https://angular.io/api?type=pipe
		- UpperCasePipe --> {{ value_expression | uppercase }} --> pasa el texto a mayúsculas
		- CurrencyPipe  --> {{ value_expression | currency [ : currencyCode [ : display [ : digitsInfo [ : locale ] ] ] ] }} --> formato moneda
			los [ indican que es un campo opcional
	- nosotros podemos crear nuestros propios filtros
		ng g pipe pipes/animales



-------------------------------------------------------------------


10/02/2020


- Observables
	- se usan con el servicio rest para hacer llamadas asíncronas
	- db.json: 
		//nuevo array de tareas:
  		"tareas": [
    		//objeto json:
    			{
      			"id": 1,
      			"titulo": "",
      			"completada": true
    			}

  		],


	- para ver el .json que acabamos de crear: json-server --watch db.json --> http://localhost:3000/tareas

crear servicio --> ng g s services/tareas
ng g c paginas/tareas

en el inspector del navegador --> network --> XHR (son las peticiones ajax)

	- librería RxJS para observables (es programación reactiva) --> https://rxjs-dev.firebaseapp.com/
	- El "por qué" de los observables
		- "Observable", que básicamente nos ahorra tener que hacer consultas repetitivas de acceso a la fuente de información, aumentando el rendimiento de las aplicaciones.
	- Programación reactiva	
		- Programación tradicional

			let a = 1;
let b = 3;
let resultado = a + b; // resultado vale 4
// Más tarde en las instrucciones... 
a = 7; // Asignamos otro valor a la variable a
// Aunque se cambie el valor de "a", resultado sigue valiendo 4,

			en programación reactiva, resultado = 10

		- Programación reactiva y los flujos de datos
			En la programación reactiva se tienen muy en cuenta esos flujos de datos, creando sistemas que son capaces de consumirlos de distintos modos, fijándose en lo que realmente les importa de estos streams y desechando lo que no. Para ello se dispone de diversas herramientas que permiten filtrar los streams, combinarlos, crear unos streams a partir de otros, etc. --> funciones map, filter, reduce...

		- Observables y programación reactiva
			- Observable
			- Observer: es el typescript, cuando nos subscribimos al observable
			- Subject

		- Qué es RxJS
			- librería para implementar programación reactiva que hacen uso del patrón observable
			- get, put, post, delete devuelven observables de cualquier tipo








